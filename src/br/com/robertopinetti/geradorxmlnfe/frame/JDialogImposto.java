/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.robertopinetti.geradorxmlnfe.frame;

import br.com.robertopinetti.geradorxmlnfe.Utils;
import br.com.robertopinetti.geradorxmlnfe.dao.ICMSTotalNFeDAO;
import br.com.robertopinetti.geradorxmlnfe.xml.dao.TIpi;
import br.com.robertopinetti.geradorxmlnfe.xml.dao.TNFe.InfNFe.Det;
import java.util.HashMap;
import javax.xml.bind.JAXBElement;
import javax.xml.namespace.QName;

/**
 *
 * @author asus
 */
public final class JDialogImposto extends javax.swing.JDialog {

    private Det det;
    private Det.Imposto.ICMS xmlICMS;
    private TIpi xmlIPI;
    private Det.Imposto.PIS xmlPIS;
    private Det.Imposto.COFINS xmlCOFINS;
    private HashMap<String, ICMSTotalNFeDAO> totais;
    private ICMSTotalNFeDAO totalNFe;

    private final char IMPOSTO_IPI = 'I';
    private final char IMPOSTO_PIS = 'P';
    private final char IMPOSTO_COFINS = 'C';

    /**
     *
     * @param parent
     * @param modal
     * @param det
     * @param totais
     */
    public JDialogImposto(java.awt.Frame parent, boolean modal, Det det, HashMap<String, ICMSTotalNFeDAO> totais) {

        this(parent, modal);

        this.setDet(det);

        this.totais = totais;
        this.totalNFe = new ICMSTotalNFeDAO();

        if (this.det.getProd() != null && this.det.getProd().getXProd() != null) {
            super.setTitle("Imposto - Item: " + this.det.getNItem() + " Prod: " + this.det.getProd().getXProd());
        } else {
            super.setTitle("Imposto - Item: " + this.det.getNItem());
        }   // if (this.det.getProd() != null

        this.xmlICMS = new Det.Imposto.ICMS();
        this.xmlIPI = new TIpi();
        this.xmlPIS = new Det.Imposto.PIS();
        this.xmlCOFINS = new Det.Imposto.COFINS();

        this.preenchePopUp();

    }   // public JDialogImposto

    /**
     * Creates new form JDialogImposto
     *
     * @param parent
     * @param modal
     */
    private JDialogImposto(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }   // private JDialogImposto

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblVTotTrib = new javax.swing.JLabel();
        txtVTotTrib = new javax.swing.JTextField();
        jTabbedPaneImposto = new javax.swing.JTabbedPane();
        jPanelTabICMS = new javax.swing.JPanel();
        jPanelICMS00 = new javax.swing.JPanel();
        lblICMS00Orig = new javax.swing.JLabel();
        cmbICMS00Orig = new javax.swing.JComboBox<>();
        lblICMS00CST = new javax.swing.JLabel();
        txtICMS00CST = new javax.swing.JTextField();
        lblICMS00ModBC = new javax.swing.JLabel();
        cmbICMS00ModBC = new javax.swing.JComboBox<>();
        lblICMS00VBC = new javax.swing.JLabel();
        txtICMS00VBC = new javax.swing.JTextField();
        lblICMS00PICMS = new javax.swing.JLabel();
        txtICMS00PICMS = new javax.swing.JTextField();
        lblICMS00VICMS = new javax.swing.JLabel();
        txtICMS00VICMS = new javax.swing.JTextField();
        jPanelTabIPI = new javax.swing.JPanel();
        lblIPICST = new javax.swing.JLabel();
        cmbIPICST = new javax.swing.JComboBox<>();
        lblIPIVBC = new javax.swing.JLabel();
        txtIPIVBC = new javax.swing.JTextField();
        lblPIPI = new javax.swing.JLabel();
        txtPIPI = new javax.swing.JTextField();
        lblVIPI = new javax.swing.JLabel();
        txtVIPI = new javax.swing.JTextField();
        jPanelTabPIS = new javax.swing.JPanel();
        lblPISCST = new javax.swing.JLabel();
        cmbPISCST = new javax.swing.JComboBox<>();
        lblPISVBC = new javax.swing.JLabel();
        txtPISVBC = new javax.swing.JTextField();
        lblPPIS = new javax.swing.JLabel();
        txtPPIS = new javax.swing.JTextField();
        lblVPIS = new javax.swing.JLabel();
        txtVPIS = new javax.swing.JTextField();
        jPanelTabCOFINS = new javax.swing.JPanel();
        lblCOFINSCST = new javax.swing.JLabel();
        cmbCOFINSCST = new javax.swing.JComboBox<>();
        lblCOFINSVBC = new javax.swing.JLabel();
        txtCOFINSVBC = new javax.swing.JTextField();
        lblPCOFINS = new javax.swing.JLabel();
        txtPCOFINS = new javax.swing.JTextField();
        lblVCOFINS = new javax.swing.JLabel();
        txtVCOFINS = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Imposto");
        setName("dialogImposto"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lblVTotTrib.setText("Valor estimado total de impostos");

        txtVTotTrib.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblVTotTrib)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtVTotTrib, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVTotTrib)
                    .addComponent(txtVTotTrib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelICMS00.setBorder(javax.swing.BorderFactory.createTitledBorder("00 - Tributada integralmente"));

        lblICMS00Orig.setText("Origem da mercadoria");

        cmbICMS00Orig.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - Nacional", "1 - Estrangeira - Importação direta", "2 - Estrangeira - Adquirida no mercado interno", "3 - Nacional - com quota de importação acima de 40%", "4 - Nacional - produção com incentivo fiscal", "5 - Nacional - com quota de importação abaixo ou igual a 40%", "6 - Estrang.- import.dir.nenh.produto nac.semelh.res.CAMEX", "7 - Estrang.- aquis.merc.int.nenh.prod.nac.semelh.res.CAMEX" }));

        lblICMS00CST.setText("Tributção pelo ICMS");

        lblICMS00ModBC.setText("Modalidade de determinação da BC do ICMS");

        cmbICMS00ModBC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - Margem Valor Agregado (%)", "1 - Pauta (valor)", "2 - Preço Tabelado Máximo (valor)", "3 - Valor da Operação" }));

        lblICMS00VBC.setText("Valor da BC do ICMS");

        txtICMS00VBC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtICMS00VBCKeyReleased(evt);
            }
        });

        lblICMS00PICMS.setText("Alíquota do ICMS %");

        txtICMS00PICMS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtICMS00PICMSKeyReleased(evt);
            }
        });

        lblICMS00VICMS.setText("Valor do ICMS");

        txtICMS00VICMS.setEditable(false);

        javax.swing.GroupLayout jPanelICMS00Layout = new javax.swing.GroupLayout(jPanelICMS00);
        jPanelICMS00.setLayout(jPanelICMS00Layout);
        jPanelICMS00Layout.setHorizontalGroup(
            jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelICMS00Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelICMS00Layout.createSequentialGroup()
                        .addComponent(lblICMS00Orig)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbICMS00Orig, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelICMS00Layout.createSequentialGroup()
                        .addComponent(lblICMS00CST)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtICMS00CST, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelICMS00Layout.createSequentialGroup()
                        .addComponent(lblICMS00ModBC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbICMS00ModBC, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelICMS00Layout.createSequentialGroup()
                        .addComponent(lblICMS00VBC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtICMS00VBC, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelICMS00Layout.createSequentialGroup()
                        .addComponent(lblICMS00PICMS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtICMS00PICMS, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelICMS00Layout.createSequentialGroup()
                        .addComponent(lblICMS00VICMS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtICMS00VICMS, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        jPanelICMS00Layout.setVerticalGroup(
            jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelICMS00Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblICMS00Orig)
                    .addComponent(cmbICMS00Orig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblICMS00CST)
                    .addComponent(txtICMS00CST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblICMS00ModBC)
                    .addComponent(cmbICMS00ModBC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblICMS00VBC)
                    .addComponent(txtICMS00VBC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblICMS00PICMS)
                    .addComponent(txtICMS00PICMS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelICMS00Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblICMS00VICMS)
                    .addComponent(txtICMS00VICMS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        cmbICMS00Orig.getAccessibleContext().setAccessibleParent(lblICMS00Orig);
        txtICMS00CST.getAccessibleContext().setAccessibleParent(lblICMS00CST);
        cmbICMS00ModBC.getAccessibleContext().setAccessibleParent(lblICMS00ModBC);
        txtICMS00VBC.getAccessibleContext().setAccessibleParent(lblICMS00VBC);
        txtICMS00PICMS.getAccessibleContext().setAccessibleParent(lblICMS00PICMS);
        lblICMS00VICMS.getAccessibleContext().setAccessibleParent(lblICMS00VICMS);
        txtICMS00VICMS.getAccessibleContext().setAccessibleParent(lblICMS00VICMS);

        javax.swing.GroupLayout jPanelTabICMSLayout = new javax.swing.GroupLayout(jPanelTabICMS);
        jPanelTabICMS.setLayout(jPanelTabICMSLayout);
        jPanelTabICMSLayout.setHorizontalGroup(
            jPanelTabICMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabICMSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelICMS00, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelTabICMSLayout.setVerticalGroup(
            jPanelTabICMSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabICMSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelICMS00, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneImposto.addTab("ICMS", jPanelTabICMS);

        lblIPICST.setText("Código da Situação Tributária do IPI");

        cmbIPICST.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00-Entrada com recuperação de crédito", "49 - Outras entradas", "50-Saída tributada", "99-Outras saídas" }));

        lblIPIVBC.setText("Valor da BC do IPI");

        txtIPIVBC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIPIVBCKeyReleased(evt);
            }
        });

        lblPIPI.setText("Alíquota do IPI %");

        txtPIPI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPIPIKeyReleased(evt);
            }
        });

        lblVIPI.setText("Valor do IPI");

        txtVIPI.setEditable(false);

        javax.swing.GroupLayout jPanelTabIPILayout = new javax.swing.GroupLayout(jPanelTabIPI);
        jPanelTabIPI.setLayout(jPanelTabIPILayout);
        jPanelTabIPILayout.setHorizontalGroup(
            jPanelTabIPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabIPILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTabIPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTabIPILayout.createSequentialGroup()
                        .addComponent(lblIPICST)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbIPICST, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelTabIPILayout.createSequentialGroup()
                        .addComponent(lblIPIVBC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIPIVBC, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelTabIPILayout.createSequentialGroup()
                        .addComponent(lblPIPI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPIPI, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelTabIPILayout.createSequentialGroup()
                        .addComponent(lblVIPI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtVIPI, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(362, Short.MAX_VALUE))
        );
        jPanelTabIPILayout.setVerticalGroup(
            jPanelTabIPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabIPILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTabIPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIPICST)
                    .addComponent(cmbIPICST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabIPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIPIVBC)
                    .addComponent(txtIPIVBC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabIPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPIPI)
                    .addComponent(txtPIPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabIPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVIPI)
                    .addComponent(txtVIPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(216, Short.MAX_VALUE))
        );

        jTabbedPaneImposto.addTab("IPI", jPanelTabIPI);

        lblPISCST.setText("Código de Situação Tributária do PIS");

        cmbPISCST.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01 - Operação Tributável - Base de Cálculo = Valor da Operação Alíquota Normal (Cumulativo/Não Cumulativo)", "02 - Operação Tributável - Base de Calculo = Valor da Operação (Alíquota Diferenciada)" }));

        lblPISVBC.setText("Valor da BC do PIS");

        txtPISVBC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPISVBCKeyReleased(evt);
            }
        });

        lblPPIS.setText("Alíquota do PIS %");

        txtPPIS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPPISKeyReleased(evt);
            }
        });

        lblVPIS.setText("Valor do PIS");

        txtVPIS.setEditable(false);

        javax.swing.GroupLayout jPanelTabPISLayout = new javax.swing.GroupLayout(jPanelTabPIS);
        jPanelTabPIS.setLayout(jPanelTabPISLayout);
        jPanelTabPISLayout.setHorizontalGroup(
            jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabPISLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTabPISLayout.createSequentialGroup()
                        .addComponent(lblPISCST)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbPISCST, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelTabPISLayout.createSequentialGroup()
                        .addGroup(jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelTabPISLayout.createSequentialGroup()
                                .addComponent(lblPISVBC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPISVBC, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelTabPISLayout.createSequentialGroup()
                                .addComponent(lblPPIS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPPIS, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelTabPISLayout.createSequentialGroup()
                                .addComponent(lblVPIS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtVPIS, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelTabPISLayout.setVerticalGroup(
            jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabPISLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPISCST)
                    .addComponent(cmbPISCST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPISVBC)
                    .addComponent(txtPISVBC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPPIS)
                    .addComponent(txtPPIS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabPISLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVPIS)
                    .addComponent(txtVPIS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(216, Short.MAX_VALUE))
        );

        jTabbedPaneImposto.addTab("PIS", jPanelTabPIS);

        lblCOFINSCST.setText("Código de Situação Tributária do COFINS");

        cmbCOFINSCST.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01 - Operação Tributável - Base de Cálculo = Valor da Operação Alíquota Normal (Cumulativo/Não Cumulativo)", "02 - Operação Tributável - Base de Calculo = Valor da Operação (Alíquota Diferenciada)" }));

        lblCOFINSVBC.setText("Valor da BC do COFINS");

        txtCOFINSVBC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCOFINSVBCKeyReleased(evt);
            }
        });

        lblPCOFINS.setText("Alíquota do COFINS %");

        txtPCOFINS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPCOFINSKeyReleased(evt);
            }
        });

        lblVCOFINS.setText("Valor do COFINS");

        txtVCOFINS.setEditable(false);

        javax.swing.GroupLayout jPanelTabCOFINSLayout = new javax.swing.GroupLayout(jPanelTabCOFINS);
        jPanelTabCOFINS.setLayout(jPanelTabCOFINSLayout);
        jPanelTabCOFINSLayout.setHorizontalGroup(
            jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabCOFINSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelTabCOFINSLayout.createSequentialGroup()
                        .addComponent(lblCOFINSCST)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCOFINSCST, 0, 558, Short.MAX_VALUE))
                    .addGroup(jPanelTabCOFINSLayout.createSequentialGroup()
                        .addGroup(jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelTabCOFINSLayout.createSequentialGroup()
                                .addComponent(lblCOFINSVBC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtCOFINSVBC, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelTabCOFINSLayout.createSequentialGroup()
                                .addComponent(lblPCOFINS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPCOFINS, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelTabCOFINSLayout.createSequentialGroup()
                                .addComponent(lblVCOFINS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtVCOFINS, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelTabCOFINSLayout.setVerticalGroup(
            jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTabCOFINSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOFINSCST)
                    .addComponent(cmbCOFINSCST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCOFINSVBC)
                    .addComponent(txtCOFINSVBC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPCOFINS)
                    .addComponent(txtPCOFINS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelTabCOFINSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVCOFINS)
                    .addComponent(txtVCOFINS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(216, Short.MAX_VALUE))
        );

        jTabbedPaneImposto.addTab("COFINS", jPanelTabCOFINS);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTabbedPaneImposto)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPaneImposto)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento no campo txtICMS00VBC para atualizar o valor do imposto no campo
     * txtICMS00VICMS
     *
     * @param evt
     */
    private void txtICMS00VBCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtICMS00VBCKeyReleased
        this.txtICMS00VICMS.setText(this.calcImp(this.txtICMS00VBC.getText(), this.txtICMS00PICMS.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtICMS00VBCKeyReleased

    /**
     * Evento no campo txtICMS00VICMS para atualizar o valor do imposto no campo
     * txtICMS00VICMS
     *
     * @param evt
     */
    private void txtICMS00PICMSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtICMS00PICMSKeyReleased
        this.txtICMS00VICMS.setText(this.calcImp(this.txtICMS00VBC.getText(), this.txtICMS00PICMS.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtICMS00PICMSKeyReleased

    /**
     * Evento no campo txtIPIVBC para atualizar o valor do imposto no campo
     * txtVIPI
     *
     * @param evt
     */
    private void txtIPIVBCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIPIVBCKeyReleased
        this.txtVIPI.setText(this.calcImp(this.txtIPIVBC.getText(), this.txtPIPI.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtIPIVBCKeyReleased

    /**
     * Evento no campo txtPIPI para atualizar o valor do imposto no campo
     * txtVIPI
     *
     * @param evt
     */
    private void txtPIPIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPIPIKeyReleased
        this.txtVIPI.setText(this.calcImp(this.txtIPIVBC.getText(), this.txtPIPI.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtPIPIKeyReleased

    /**
     * Ao fechar o POP-UP irá atualizar os dados dos impostos
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.retornaDadosPopUp();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Evento no campo txtPISVBC para atualizar o valor do imposto no campo
     * txtVPIS
     *
     * @param evt
     */
    private void txtPISVBCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPISVBCKeyReleased
        this.txtVPIS.setText(this.calcImp(this.txtPISVBC.getText(), this.txtPPIS.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtPISVBCKeyReleased

    /**
     * Evento no campo txtPPIS para atualizar o valor do imposto no campo
     * txtVPIS
     *
     * @param evt
     */
    private void txtPPISKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPPISKeyReleased
        this.txtVPIS.setText(this.calcImp(this.txtPISVBC.getText(), this.txtPPIS.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtPPISKeyReleased

    /**
     * Evento no campo txtCOFINSVBC para atualizar o valor do imposto no campo
     * txtVCOFINS
     *
     * @param evt
     */
    private void txtCOFINSVBCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCOFINSVBCKeyReleased
        this.txtVCOFINS.setText(this.calcImp(this.txtCOFINSVBC.getText(), this.txtPCOFINS.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtCOFINSVBCKeyReleased

    /**
     * Evento no campo txtPCOFINS para atualizar o valor do imposto no campo
     * txtVCOFINS
     *
     * @param evt
     */
    private void txtPCOFINSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPCOFINSKeyReleased
        this.txtVCOFINS.setText(this.calcImp(this.txtCOFINSVBC.getText(), this.txtPCOFINS.getText()));
        this.calcTotalImp();
    }//GEN-LAST:event_txtPCOFINSKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogImposto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogImposto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogImposto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogImposto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {

            JDialogImposto dialog = new JDialogImposto(new javax.swing.JFrame(), true);

            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {

                    System.exit(0);

                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbCOFINSCST;
    private javax.swing.JComboBox<String> cmbICMS00ModBC;
    private javax.swing.JComboBox<String> cmbICMS00Orig;
    private javax.swing.JComboBox<String> cmbIPICST;
    private javax.swing.JComboBox<String> cmbPISCST;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelICMS00;
    private javax.swing.JPanel jPanelTabCOFINS;
    private javax.swing.JPanel jPanelTabICMS;
    private javax.swing.JPanel jPanelTabIPI;
    private javax.swing.JPanel jPanelTabPIS;
    private javax.swing.JTabbedPane jTabbedPaneImposto;
    private javax.swing.JLabel lblCOFINSCST;
    private javax.swing.JLabel lblCOFINSVBC;
    private javax.swing.JLabel lblICMS00CST;
    private javax.swing.JLabel lblICMS00ModBC;
    private javax.swing.JLabel lblICMS00Orig;
    private javax.swing.JLabel lblICMS00PICMS;
    private javax.swing.JLabel lblICMS00VBC;
    private javax.swing.JLabel lblICMS00VICMS;
    private javax.swing.JLabel lblIPICST;
    private javax.swing.JLabel lblIPIVBC;
    private javax.swing.JLabel lblPCOFINS;
    private javax.swing.JLabel lblPIPI;
    private javax.swing.JLabel lblPISCST;
    private javax.swing.JLabel lblPISVBC;
    private javax.swing.JLabel lblPPIS;
    private javax.swing.JLabel lblVCOFINS;
    private javax.swing.JLabel lblVIPI;
    private javax.swing.JLabel lblVPIS;
    private javax.swing.JLabel lblVTotTrib;
    private javax.swing.JTextField txtCOFINSVBC;
    private javax.swing.JTextField txtICMS00CST;
    private javax.swing.JTextField txtICMS00PICMS;
    private javax.swing.JTextField txtICMS00VBC;
    private javax.swing.JTextField txtICMS00VICMS;
    private javax.swing.JTextField txtIPIVBC;
    private javax.swing.JTextField txtPCOFINS;
    private javax.swing.JTextField txtPIPI;
    private javax.swing.JTextField txtPISVBC;
    private javax.swing.JTextField txtPPIS;
    private javax.swing.JTextField txtVCOFINS;
    private javax.swing.JTextField txtVIPI;
    private javax.swing.JTextField txtVPIS;
    private javax.swing.JTextField txtVTotTrib;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the det
     */
    public Det getDet() {
        return det;
    }

    /**
     * @param det the det to set
     */
    public void setDet(Det det) {
        this.det = det;
    }

    /**
     * Preenche os campos do Pop-up
     */
    private void preenchePopUp() {

        if (this.det.getImposto() != null && !this.det.getImposto().getContent().isEmpty()) {

            this.setImpostos(this.det.getImposto());

        }   // if (this.det.getImposto() != null

    }   // void preenchePopUp

    /**
     * Preenche os impostos
     *
     * @param imposto Impostos do Item da NF-e
     */
    private void setImpostos(Det.Imposto imposto) {

        double vTotTrib = 0;
        double vICMS = 0;
        double vIPI = 0;
        double vPIS = 0;
        double vCOFINS = 0;

        for (int i = 0; i < imposto.getContent().size(); i++) {

            JAXBElement element = this.det.getImposto().getContent().get(i);
            String tag = element.getName().getLocalPart();

            switch (tag) {

                case "vTotTrib":
                    vTotTrib = Double.parseDouble(element.getValue().toString());
                    break;

                case "ICMS":
                    this.xmlICMS = (Det.Imposto.ICMS) element.getValue();

                    if (this.xmlICMS != null && this.xmlICMS.getICMS00() != null) {
                        this.cmbICMS00Orig.setSelectedIndex(Integer.parseInt(this.xmlICMS.getICMS00().getOrig()));
                        this.txtICMS00CST.setText(this.xmlICMS.getICMS00().getCST());
                        this.cmbICMS00ModBC.setSelectedIndex(Integer.parseInt(this.xmlICMS.getICMS00().getModBC()));
                        this.txtICMS00VBC.setText(this.xmlICMS.getICMS00().getVBC());
                        this.txtICMS00PICMS.setText(this.xmlICMS.getICMS00().getPICMS());

                        vICMS = Double.parseDouble(this.xmlICMS.getICMS00().getVICMS());
                    }   // if (this.xmlICMS != null && this.xmlICMS.getICMS00() != null)
                    break;

                case "IPI":
                    this.xmlIPI = (TIpi) element.getValue();

                    if (this.xmlIPI != null && this.xmlIPI.getIPITrib() != null) {
                        this.cmbIPICST.setSelectedIndex(this.setCST(this.xmlIPI.getIPITrib().getCST()));
                        this.txtIPIVBC.setText(this.xmlIPI.getIPITrib().getVBC());
                        this.txtPIPI.setText(this.xmlIPI.getIPITrib().getPIPI());

                        vIPI = Double.parseDouble(this.xmlIPI.getIPITrib().getVIPI());
                    }   // if (this.xmlIPI != null && this.xmlIPI.getIPITrib() != null)
                    break;

                case "PIS":
                    this.xmlPIS = (Det.Imposto.PIS) element.getValue();

                    if (this.xmlPIS != null && this.xmlPIS.getPISAliq() != null) {
                        this.cmbPISCST.setSelectedIndex(this.setCST(this.xmlPIS.getPISAliq().getCST()));
                        this.txtPISVBC.setText(this.xmlPIS.getPISAliq().getVBC());
                        this.txtPPIS.setText(this.xmlPIS.getPISAliq().getPPIS());

                        vPIS = Double.parseDouble(this.xmlPIS.getPISAliq().getVPIS());
                    }   // if (this.xmlPIS != null && this.xmlPIS.getPISAliq() != null)
                    break;

                case "COFINS":
                    this.xmlCOFINS = (Det.Imposto.COFINS) element.getValue();

                    if (this.xmlCOFINS != null && this.xmlCOFINS.getCOFINSAliq() != null) {
                        
                        this.cmbCOFINSCST.setSelectedIndex(this.setCST(this.xmlCOFINS.getCOFINSAliq().getCST()));
                        this.txtCOFINSVBC.setText(this.xmlCOFINS.getCOFINSAliq().getVBC());
                        this.txtPCOFINS.setText(this.xmlCOFINS.getCOFINSAliq().getPCOFINS());

                        vCOFINS = Double.parseDouble(this.xmlCOFINS.getCOFINSAliq().getVCOFINS());
                    }   // if (this.xmlCOFINS != null)
                    break;

                default:
                    break;

            }   // switch (tag)

        }   // for (int i = 0; i < imposto.getContent().size(); i++)

        vTotTrib = vICMS + vIPI + vPIS + vCOFINS;

        this.txtICMS00VICMS.setText(String.valueOf(vICMS));
        this.txtVIPI.setText(String.valueOf(vIPI));
        this.txtVPIS.setText(String.valueOf(vPIS));
        this.txtVCOFINS.setText(String.valueOf(vCOFINS));

        this.txtVTotTrib.setText(String.valueOf(vTotTrib));

    }   // void setImpostos

    private String getCST(char imp, int index) {

        switch (imp) {

            case IMPOSTO_IPI:

                switch (index) {

                    case 0:
                        return "00";
                    case 1:
                        return "49";
                    case 2:
                        return "50";
                    case 3:
                        return "99";

                }   // switch (index)

            default:
                return "" + index;

        }   // switch(imp)

    }   // String getCST

    /**
     *
     * @param cST
     * @return
     */
    private int setCST(String cST) {

        int cst = Integer.parseInt(cST);

        switch (cst) {
            case 01:
                return 0;
            case 02:
                return 1;
            case 49:
                return 1;
            case 50:
                return 2;
            case 99:
                return 3;
            default:
                return 0;
        }   // switch (cst)

    }   // int setCST

    /**
     * Calcula o valor do imposto
     *
     * @param bc Base
     * @param aliq Alíquota
     * @return Valor do Imposto
     */
    private String calcImp(String bc, String aliq) {

        double base = Utils.toDouble(bc);
        double aliquota = Utils.toDouble(aliq);
        double valor = base * (aliquota / 100);

        return String.valueOf(valor);

    }

    /**
     * Calcula o valor total dos impostos
     */
    private void calcTotalImp() {

        double icms = Utils.toDouble(this.txtICMS00VICMS.getText());
        double ipi = Utils.toDouble(this.txtVIPI.getText());
        double pis = Utils.toDouble(this.txtVPIS.getText());
        double cofins = Utils.toDouble(this.txtVCOFINS.getText());
        double total = icms + ipi + pis + cofins;

        this.txtVTotTrib.setText(String.valueOf(total));

    }   // void calcTotalImp

    /**
     * Retorna os dados do Pop-up dos impostos
     */
    private void retornaDadosPopUp() {

        Det.Imposto imposto = this.det.getImposto();

        this.setICMS00();
        this.setIPI();
        this.setPIS();
        this.setCOFINS();

        this.totalNFe.setvBC(Utils.toDouble(this.xmlICMS.getICMS00().getVBC()));
        this.totalNFe.setvICMS(Utils.toDouble(this.xmlICMS.getICMS00().getVICMS()));
        this.totalNFe.setvProd(Utils.toDouble(this.det.getProd().getVProd()));

        if (this.xmlIPI != null && this.xmlIPI.getIPITrib() != null) {
            this.totalNFe.setvIPI(Utils.toDouble(this.xmlIPI.getIPITrib().getVIPI()));
        } else {
            this.totalNFe.setvIPI(0);
        }

        if (this.xmlPIS != null && this.xmlPIS.getPISAliq() != null) {
            this.totalNFe.setvPIS(Utils.toDouble(this.xmlPIS.getPISAliq().getVPIS()));
        } else {
            this.totalNFe.setvPIS(0);
        }

        if (this.xmlCOFINS != null && this.xmlCOFINS.getCOFINSAliq() != null) {
            this.totalNFe.setvCOFINS(Utils.toDouble(this.xmlCOFINS.getCOFINSAliq().getVCOFINS()));
        } else {
            this.totalNFe.setvCOFINS(0);
        }

        this.totais.put(this.det.getNItem(), this.totalNFe);

        for (int i = 0; i < imposto.getContent().size(); i++) {

            QName qn;

            switch (i) {

                case 0: // Valor total dos impostos
                    qn = new QName("http://www.portalfiscal.inf.br/nfe", "vTotTrib", "");
                    String vTotTrib = this.txtVTotTrib.getText();
                    imposto.getContent().set(i, new JAXBElement<>(qn, String.class, vTotTrib));
                    break;

                case 1: // ICMS
                    qn = new QName("ICMS");
                    imposto.getContent().set(i, new JAXBElement<>(qn, Det.Imposto.ICMS.class, this.xmlICMS));
                    break;

                case 2: // IPI
                    qn = new QName("IPI");
                    imposto.getContent().set(i, new JAXBElement<>(qn, TIpi.class, this.xmlIPI));
                    break;

                case 3: // PIS
                    qn = new QName("PIS");
                    imposto.getContent().set(i, new JAXBElement<>(qn, Det.Imposto.PIS.class, this.xmlPIS));
                    break;

                case 4: // COFINS
                    qn = new QName("COFINS");
                    imposto.getContent().set(i, new JAXBElement<>(qn, Det.Imposto.COFINS.class, this.xmlCOFINS));
                    break;

            }   // switch(i)

        }   // for (int i = 0; i < imposto.getContent().size(); i++)

        this.det.setImposto(imposto);
    }   // void retornaDadosPopUp

    /**
     * Atualiza os valores do ICMS
     */
    private void setICMS00() {

        if (this.xmlICMS.getICMS00() != null) {

            this.xmlICMS.getICMS00().setOrig(String.valueOf(this.cmbICMS00Orig.getSelectedIndex()));
            this.xmlICMS.getICMS00().setCST(this.txtICMS00CST.getText());
            this.xmlICMS.getICMS00().setModBC(String.valueOf(this.cmbICMS00ModBC.getSelectedIndex()));
            this.xmlICMS.getICMS00().setVBC(this.txtICMS00VBC.getText());
            this.xmlICMS.getICMS00().setPICMS(this.txtICMS00PICMS.getText());
            this.xmlICMS.getICMS00().setVICMS(this.txtICMS00VICMS.getText());

            this.totalNFe.setvICMS(Double.parseDouble(this.xmlICMS.getICMS00().getVICMS()));

        } else {
            this.xmlICMS.setICMS00(new Det.Imposto.ICMS.ICMS00());
        }   // if (this.xmlICMS.getICMS00() != null)

    }   // void setICMS

    /**
     * Atualiza os valores do IPI
     */
    private void setIPI() {

        if (this.xmlIPI != null && this.xmlIPI.getIPITrib() != null) {

            this.xmlIPI.setClEnq("O");
            this.xmlIPI.setCEnq("999");

            this.xmlIPI.getIPITrib().setCST(this.getCST(IMPOSTO_IPI, this.cmbIPICST.getSelectedIndex()));
            this.xmlIPI.getIPITrib().setVBC(this.txtIPIVBC.getText());
            this.xmlIPI.getIPITrib().setPIPI(this.txtPIPI.getText());
            this.xmlIPI.getIPITrib().setVIPI(this.txtVIPI.getText());

            this.totalNFe.setvBC(Double.parseDouble(this.xmlIPI.getIPITrib().getVBC()));
            this.totalNFe.setvIPI(Double.parseDouble(this.xmlIPI.getIPITrib().getVIPI()));

        }   // if (this.xmlIPI != null && this.xmlIPI.getIPITrib() != null)

    }   // void setIPI

    /**
     * Atualiza os valores do PIS
     */
    private void setPIS() {

        if (this.xmlPIS.getPISAliq() != null) {

            this.xmlPIS.getPISAliq().setCST(this.getCST(IMPOSTO_PIS, this.cmbPISCST.getSelectedIndex()));
            this.xmlPIS.getPISAliq().setVBC(this.txtPISVBC.getText());
            this.xmlPIS.getPISAliq().setPPIS(this.txtPPIS.getText());
            this.xmlPIS.getPISAliq().setVPIS(this.txtVPIS.getText());

            this.totalNFe.setvPIS(Double.parseDouble(this.xmlPIS.getPISAliq().getVPIS()));

        } else {
            this.xmlPIS.setPISAliq(new Det.Imposto.PIS.PISAliq());
        }   // if (this.xmlPIS.getPISAliq() != null)

    }   // void setPIS

    /**
     * Atualiza os valores do COFINS
     */
    private void setCOFINS() {

        if (this.xmlCOFINS.getCOFINSAliq() != null) {

            this.xmlCOFINS.getCOFINSAliq().setCST(this.getCST(IMPOSTO_COFINS, this.cmbCOFINSCST.getSelectedIndex()));
            this.xmlCOFINS.getCOFINSAliq().setVBC(this.txtCOFINSVBC.getText());
            this.xmlCOFINS.getCOFINSAliq().setPCOFINS(this.txtPCOFINS.getText());
            this.xmlCOFINS.getCOFINSAliq().setVCOFINS(this.txtVCOFINS.getText());

            this.totalNFe.setvCOFINS(Double.parseDouble(this.xmlCOFINS.getCOFINSAliq().getVCOFINS()));

        } else {
            this.xmlCOFINS.setCOFINSAliq(new Det.Imposto.COFINS.COFINSAliq());
        }   // if (this.xmlCOFINS.getCOFINSAliq() != null)

    }   // void setCOFINS

}   // class JDialogImposto
